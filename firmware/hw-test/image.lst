
image:     file format elf32-lm32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000624  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000014  00000624  00000624  00000678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000014  00000638  00000638  0000068c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000004  0000064c  0000064c  000006a0  2**2
                  ALLOC
  4 .debug_abbrev 000002d5  00000000  00000000  000006a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000093d  00000000  00000000  00000975  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000564  00000000  00000000  000012b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000001c0  00000000  00000000  00001818  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000030c  00000000  00000000  000019d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 000001ea  00000000  00000000  00001ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 00000080  00000000  00000000  00001ece  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000040  00000000  00000000  00001f4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000260  00000000  00000000  00001f8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000011  00000000  00000000  000021ee  2**0
                  CONTENTS, READONLY
 14 .debug_ranges 00000048  00000000  00000000  000021ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 00 4f 	calli 208 <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 06 50 	ori gp,gp,0x650
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 06 4c 	ori r1,r1,0x64c
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 06 50 	ori r3,r3,0x650

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 3a 	calli 224 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <irq_handler>:

#include "soc-hw.h"
void irq_handler(uint32_t pending);

void irq_handler(uint32_t pending)
{
 208:	37 9c ff fc 	addi sp,sp,-4
 20c:	5b 9d 00 04 	sw (sp+4),ra
	//irq_disable();	
	gpio_set_out(0xFF);
 210:	34 01 00 ff 	mvi r1,255
 214:	f8 00 00 97 	calli 470 <gpio_set_out>
        //irq_enable();
}
 218:	2b 9d 00 04 	lw ra,(sp+4)
 21c:	37 9c 00 04 	addi sp,sp,4
 220:	c3 a0 00 00 	ret

00000224 <main>:


int main()
{
 224:	37 9c ff ec 	addi sp,sp,-20
 228:	5b 8b 00 14 	sw (sp+20),r11
 22c:	5b 8c 00 10 	sw (sp+16),r12
 230:	5b 8d 00 0c 	sw (sp+12),r13
 234:	5b 8e 00 08 	sw (sp+8),r14
 238:	5b 9d 00 04 	sw (sp+4),ra
		
        irq_set_mask(0x04);
 23c:	34 01 00 04 	mvi r1,4
 240:	fb ff ff c6 	calli 158 <irq_set_mask>
        //irq_enable();
        gpio_set_dir(0xF0);
 244:	34 01 00 f0 	mvi r1,240
 248:	78 0c 00 00 	mvhi r12,0x0
 24c:	78 0e 00 00 	mvhi r14,0x0
 250:	f8 00 00 82 	calli 458 <gpio_set_dir>
 254:	39 8c 06 44 	ori r12,r12,0x644
 258:	39 ce 06 24 	ori r14,r14,0x624
	b = a << 4;
	gpio_set_out(b);
	nsleep(5);
	

	if (a == 0x0F){
 25c:	34 0d 00 0f 	mvi r13,15
	//msleep(200);
	spi_set_cs(spi1, ~0xFF);
	//msleep(200);			
	spi_set_mosi(spi1, 0x0A);
*/
	read_adc(spi0, ~0x01);
 260:	29 81 00 00 	lw r1,(r12+0)
 264:	34 02 00 fe 	mvi r2,254
 268:	f8 00 00 96 	calli 4c0 <read_adc>
	
	a= gpio_get_in();
 26c:	f8 00 00 63 	calli 3f8 <gpio_get_in>
 270:	b8 20 58 00 	mv r11,r1
	nsleep(5);
 274:	34 01 00 05 	mvi r1,5
 278:	f8 00 00 1d 	calli 2ec <nsleep>
	gpio_set_out(a);
 27c:	b9 60 08 00 	mv r1,r11
 280:	f8 00 00 7c 	calli 470 <gpio_set_out>
	nsleep(5);
 284:	34 01 00 05 	mvi r1,5
 288:	f8 00 00 19 	calli 2ec <nsleep>
	b = a << 4;
 28c:	3d 61 00 04 	sli r1,r11,4
	gpio_set_out(b);
 290:	20 21 00 f0 	andi r1,r1,0xf0
 294:	f8 00 00 77 	calli 470 <gpio_set_out>
	nsleep(5);
 298:	34 01 00 05 	mvi r1,5
 29c:	f8 00 00 14 	calli 2ec <nsleep>
	

	if (a == 0x0F){
 2a0:	5d 6d ff f0 	bne r11,r13,260 <main+0x3c>
	uart_putstr("lo ke sea: \n");
 2a4:	b9 c0 08 00 	mv r1,r14
 2a8:	f8 00 00 47 	calli 3c4 <uart_putstr>
 2ac:	e3 ff ff ed 	bi 260 <main+0x3c>

000002b0 <msleep>:
void msleep(uint32_t msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
 2b0:	78 04 00 00 	mvhi r4,0x0
 2b4:	38 84 06 34 	ori r4,r4,0x634
 2b8:	28 83 00 00 	lw r3,(r4+0)
 2bc:	78 02 00 00 	mvhi r2,0x0
 2c0:	38 42 06 3c 	ori r2,r2,0x63c
 2c4:	28 42 00 00 	lw r2,(r2+0)
 2c8:	88 23 08 00 	mul r1,r1,r3
 2cc:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 2d0:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 2d4:	34 01 00 08 	mvi r1,8
 2d8:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 2dc:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 2e0:	20 21 00 01 	andi r1,r1,0x1
 2e4:	44 20 ff fe 	be r1,r0,2dc <msleep+0x2c>
}
 2e8:	c3 a0 00 00 	ret

000002ec <nsleep>:
void nsleep(uint32_t nsec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*nsec;
 2ec:	78 02 00 00 	mvhi r2,0x0
 2f0:	38 42 06 3c 	ori r2,r2,0x63c
 2f4:	28 42 00 00 	lw r2,(r2+0)
 2f8:	08 21 00 64 	muli r1,r1,100
 2fc:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 300:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 304:	34 01 00 08 	mvi r1,8
 308:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 30c:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 310:	20 21 00 01 	andi r1,r1,0x1
 314:	44 20 ff fe 	be r1,r0,30c <nsleep+0x20>
}
 318:	c3 a0 00 00 	ret

0000031c <tic_isr>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 31c:	78 01 00 00 	mvhi r1,0x0
 320:	38 21 06 4c 	ori r1,r1,0x64c
 324:	28 23 00 00 	lw r3,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 328:	78 02 00 00 	mvhi r2,0x0
 32c:	38 42 06 3c 	ori r2,r2,0x63c
 330:	28 42 00 00 	lw r2,(r2+0)

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 334:	34 63 00 01 	addi r3,r3,1
 338:	58 23 00 00 	sw (r1+0),r3
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 33c:	34 01 00 0e 	mvi r1,14
 340:	58 41 00 00 	sw (r2+0),r1
}
 344:	c3 a0 00 00 	ret

00000348 <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 348:	78 01 00 00 	mvhi r1,0x0
 34c:	38 21 06 3c 	ori r1,r1,0x63c
 350:	28 21 00 00 	lw r1,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 354:	78 02 00 00 	mvhi r2,0x0

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 358:	34 03 27 10 	mvi r3,10000
 35c:	58 23 00 04 	sw (r1+4),r3
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 360:	38 42 06 4c 	ori r2,r2,0x64c
 364:	58 40 00 00 	sw (r2+0),r0

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
 368:	58 20 00 08 	sw (r1+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 36c:	34 02 00 0e 	mvi r2,14
 370:	58 22 00 00 	sw (r1+0),r2

	//isr_register(1, &tic_isr);
}
 374:	c3 a0 00 00 	ret

00000378 <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 378:	c3 a0 00 00 	ret

0000037c <uart_getchar>:

char uart_getchar()
{   
 37c:	78 01 00 00 	mvhi r1,0x0
 380:	38 21 06 38 	ori r1,r1,0x638
 384:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
 388:	28 41 00 00 	lw r1,(r2+0)
 38c:	20 21 00 01 	andi r1,r1,0x1
 390:	44 20 ff fe 	be r1,r0,388 <uart_getchar+0xc>
	return uart0->rxtx;
 394:	28 41 00 04 	lw r1,(r2+4)
}
 398:	20 21 00 ff 	andi r1,r1,0xff
 39c:	c3 a0 00 00 	ret

000003a0 <uart_putchar>:

void uart_putchar(char c)
{
 3a0:	78 02 00 00 	mvhi r2,0x0
 3a4:	38 42 06 38 	ori r2,r2,0x638
 3a8:	28 43 00 00 	lw r3,(r2+0)
 3ac:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 3b0:	28 62 00 00 	lw r2,(r3+0)
 3b4:	20 42 00 10 	andi r2,r2,0x10
 3b8:	5c 40 ff fe 	bne r2,r0,3b0 <uart_putchar+0x10>
	uart0->rxtx = c;
 3bc:	58 61 00 04 	sw (r3+4),r1
}
 3c0:	c3 a0 00 00 	ret

000003c4 <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 3c4:	40 24 00 00 	lbu r4,(r1+0)
 3c8:	44 80 00 0b 	be r4,r0,3f4 <uart_putstr+0x30>
 3cc:	78 02 00 00 	mvhi r2,0x0
 3d0:	38 42 06 38 	ori r2,r2,0x638
 3d4:	28 43 00 00 	lw r3,(r2+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 3d8:	28 62 00 00 	lw r2,(r3+0)
 3dc:	20 42 00 10 	andi r2,r2,0x10
 3e0:	5c 40 ff fe 	bne r2,r0,3d8 <uart_putstr+0x14>
	uart0->rxtx = c;
 3e4:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
 3e8:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 3ec:	40 24 00 00 	lbu r4,(r1+0)
 3f0:	5c 82 ff fa 	bne r4,r2,3d8 <uart_putstr+0x14>
 3f4:	c3 a0 00 00 	ret

000003f8 <gpio_get_in>:
 * GPIO Functions
 */


char gpio_get_in(){
	return gpio0->gpio_in;
 3f8:	78 01 00 00 	mvhi r1,0x0
 3fc:	38 21 06 40 	ori r1,r1,0x640
 400:	28 21 00 00 	lw r1,(r1+0)
 404:	28 21 00 00 	lw r1,(r1+0)
}
 408:	20 21 00 ff 	andi r1,r1,0xff
 40c:	c3 a0 00 00 	ret

00000410 <gpio_get_dir>:

char gpio_get_dir(){
	return gpio0->gpio_dir;
 410:	78 01 00 00 	mvhi r1,0x0
 414:	38 21 06 40 	ori r1,r1,0x640
 418:	28 21 00 00 	lw r1,(r1+0)
 41c:	28 21 00 08 	lw r1,(r1+8)

}
 420:	20 21 00 ff 	andi r1,r1,0xff
 424:	c3 a0 00 00 	ret

00000428 <gpio_get_out>:

char gpio_get_out(){
	return gpio0->gpio_out;
 428:	78 01 00 00 	mvhi r1,0x0
 42c:	38 21 06 40 	ori r1,r1,0x640
 430:	28 21 00 00 	lw r1,(r1+0)
 434:	28 21 00 04 	lw r1,(r1+4)

}
 438:	20 21 00 ff 	andi r1,r1,0xff
 43c:	c3 a0 00 00 	ret

00000440 <gpio_set_in>:

void gpio_set_in(char c){
	 gpio0->gpio_in = c;
 440:	78 02 00 00 	mvhi r2,0x0
 444:	38 42 06 40 	ori r2,r2,0x640
 448:	28 42 00 00 	lw r2,(r2+0)
char gpio_get_out(){
	return gpio0->gpio_out;

}

void gpio_set_in(char c){
 44c:	20 21 00 ff 	andi r1,r1,0xff
	 gpio0->gpio_in = c;
 450:	58 41 00 00 	sw (r2+0),r1
}
 454:	c3 a0 00 00 	ret

00000458 <gpio_set_dir>:

void gpio_set_dir(char c){
	 gpio0->gpio_dir = c;
 458:	78 02 00 00 	mvhi r2,0x0
 45c:	38 42 06 40 	ori r2,r2,0x640
 460:	28 42 00 00 	lw r2,(r2+0)

void gpio_set_in(char c){
	 gpio0->gpio_in = c;
}

void gpio_set_dir(char c){
 464:	20 21 00 ff 	andi r1,r1,0xff
	 gpio0->gpio_dir = c;
 468:	58 41 00 08 	sw (r2+8),r1
}
 46c:	c3 a0 00 00 	ret

00000470 <gpio_set_out>:

void gpio_set_out(char c){
	 gpio0->gpio_out = c;
 470:	78 02 00 00 	mvhi r2,0x0
 474:	38 42 06 40 	ori r2,r2,0x640
 478:	28 42 00 00 	lw r2,(r2+0)

void gpio_set_dir(char c){
	 gpio0->gpio_dir = c;
}

void gpio_set_out(char c){
 47c:	20 21 00 ff 	andi r1,r1,0xff
	 gpio0->gpio_out = c;
 480:	58 41 00 04 	sw (r2+4),r1
}
 484:	c3 a0 00 00 	ret

00000488 <spi_get_div>:

/*****************************************SPI0 Functions****/


char spi_get_div(spi_t *spi){
	return spi->spi_divisor;
 488:	28 21 00 0c 	lw r1,(r1+12)
}
 48c:	20 21 00 ff 	andi r1,r1,0xff
 490:	c3 a0 00 00 	ret

00000494 <spi_get_mosi>:

char spi_get_mosi(spi_t *spi){
	return spi->spi_rx_tx;
 494:	28 21 00 00 	lw r1,(r1+0)

}
 498:	20 21 00 ff 	andi r1,r1,0xff
 49c:	c3 a0 00 00 	ret

000004a0 <spi_get_cs>:

char spi_get_cs(spi_t *spi){
	return spi->spi_cs;
 4a0:	28 21 00 08 	lw r1,(r1+8)
}
 4a4:	20 21 00 ff 	andi r1,r1,0xff
 4a8:	c3 a0 00 00 	ret

000004ac <spi_get_miso>:

char spi_get_miso(spi_t *spi){
	while ((spi -> spi_run));
 4ac:	28 22 00 04 	lw r2,(r1+4)
 4b0:	5c 40 ff ff 	bne r2,r0,4ac <spi_get_miso>
	return spi->spi_rx_tx;
 4b4:	28 21 00 00 	lw r1,(r1+0)

}
 4b8:	20 21 00 ff 	andi r1,r1,0xff
 4bc:	c3 a0 00 00 	ret

000004c0 <read_adc>:

char read_adc(spi_t *spi0, char cs){
 4c0:	37 9c ff f4 	addi sp,sp,-12
 4c4:	5b 8b 00 0c 	sw (sp+12),r11
 4c8:	5b 8c 00 08 	sw (sp+8),r12
 4cc:	5b 9d 00 04 	sw (sp+4),ra
void spi_set_div(spi_t *spi, char c){
	 spi->spi_divisor = c;
}

void spi_set_cs(spi_t *spi, char  c){
	spi->spi_cs=c;
 4d0:	34 03 00 0f 	mvi r3,15
	while ((spi -> spi_run));
	return spi->spi_rx_tx;

}

char read_adc(spi_t *spi0, char cs){
 4d4:	b8 20 58 00 	mv r11,r1
void spi_set_div(spi_t *spi, char c){
	 spi->spi_divisor = c;
}

void spi_set_cs(spi_t *spi, char  c){
	spi->spi_cs=c;
 4d8:	59 63 00 08 	sw (r11+8),r3

}

char read_adc(spi_t *spi0, char cs){
	spi_set_cs(spi0, 0xF);
	nsleep(20);	
 4dc:	34 01 00 14 	mvi r1,20
	while ((spi -> spi_run));
	return spi->spi_rx_tx;

}

char read_adc(spi_t *spi0, char cs){
 4e0:	20 4c 00 ff 	andi r12,r2,0xff
	spi_set_cs(spi0, 0xF);
	nsleep(20);	
 4e4:	fb ff ff 82 	calli 2ec <nsleep>
	char msb;
	char lsb;
	char lsb2;	
	spi_set_cs(spi0, cs);
	nsleep(30);
 4e8:	34 01 00 1e 	mvi r1,30
void spi_set_div(spi_t *spi, char c){
	 spi->spi_divisor = c;
}

void spi_set_cs(spi_t *spi, char  c){
	spi->spi_cs=c;
 4ec:	59 6c 00 08 	sw (r11+8),r12
	nsleep(20);	
	char msb;
	char lsb;
	char lsb2;	
	spi_set_cs(spi0, cs);
	nsleep(30);
 4f0:	fb ff ff 7f 	calli 2ec <nsleep>

void spi_set_cs(spi_t *spi, char  c){
	spi->spi_cs=c;
}
void spi_set_mosi(spi_t *spi, char c){
	 while ((spi -> spi_run));
 4f4:	29 61 00 04 	lw r1,(r11+4)
 4f8:	5c 20 ff ff 	bne r1,r0,4f4 <read_adc+0x34>
	 spi->	spi_rx_tx = c;
 4fc:	34 01 00 c0 	mvi r1,192
 500:	59 61 00 00 	sw (r11+0),r1
char spi_get_cs(spi_t *spi){
	return spi->spi_cs;
}

char spi_get_miso(spi_t *spi){
	while ((spi -> spi_run));
 504:	29 61 00 04 	lw r1,(r11+4)
 508:	5c 20 ff ff 	bne r1,r0,504 <read_adc+0x44>
	return spi->spi_rx_tx;
 50c:	29 63 00 00 	lw r3,(r11+0)
void spi_set_div(spi_t *spi, char c){
	 spi->spi_divisor = c;
}

void spi_set_cs(spi_t *spi, char  c){
	spi->spi_cs=c;
 510:	59 6c 00 08 	sw (r11+8),r12
	return spi->spi_cs;
}

char spi_get_miso(spi_t *spi){
	while ((spi -> spi_run));
	return spi->spi_rx_tx;
 514:	20 63 00 ff 	andi r3,r3,0xff

void spi_set_cs(spi_t *spi, char  c){
	spi->spi_cs=c;
}
void spi_set_mosi(spi_t *spi, char c){
	 while ((spi -> spi_run));
 518:	29 61 00 04 	lw r1,(r11+4)
 51c:	5c 20 ff ff 	bne r1,r0,518 <read_adc+0x58>
	 spi->	spi_rx_tx = c;
 520:	59 60 00 00 	sw (r11+0),r0
char spi_get_cs(spi_t *spi){
	return spi->spi_cs;
}

char spi_get_miso(spi_t *spi){
	while ((spi -> spi_run));
 524:	29 61 00 04 	lw r1,(r11+4)
 528:	5c 20 ff ff 	bne r1,r0,524 <read_adc+0x64>
	return spi->spi_rx_tx;
 52c:	29 62 00 00 	lw r2,(r11+0)
void spi_set_div(spi_t *spi, char c){
	 spi->spi_divisor = c;
}

void spi_set_cs(spi_t *spi, char  c){
	spi->spi_cs=c;
 530:	59 6c 00 08 	sw (r11+8),r12
	return spi->spi_cs;
}

char spi_get_miso(spi_t *spi){
	while ((spi -> spi_run));
	return spi->spi_rx_tx;
 534:	20 42 00 ff 	andi r2,r2,0xff

void spi_set_cs(spi_t *spi, char  c){
	spi->spi_cs=c;
}
void spi_set_mosi(spi_t *spi, char c){
	 while ((spi -> spi_run));
 538:	29 61 00 04 	lw r1,(r11+4)
 53c:	5c 20 ff ff 	bne r1,r0,538 <read_adc+0x78>
	 spi->	spi_rx_tx = c;
 540:	59 60 00 00 	sw (r11+0),r0
char spi_get_cs(spi_t *spi){
	return spi->spi_cs;
}

char spi_get_miso(spi_t *spi){
	while ((spi -> spi_run));
 544:	29 61 00 04 	lw r1,(r11+4)
 548:	5c 20 ff ff 	bne r1,r0,544 <read_adc+0x84>
	return spi->spi_rx_tx;
 54c:	29 64 00 00 	lw r4,(r11+0)
	spi_set_mosi(spi0, 0x00);
	lsb = spi_get_miso(spi0);
	spi_set_cs(spi0, cs);
	spi_set_mosi(spi0, 0x00);
	lsb2 = spi_get_miso(spi0);
	if(msb == 0x00 && lsb == 0x00 && lsb == 0x00){
 550:	b8 43 10 00 	or r2,r2,r3
 554:	44 41 00 07 	be r2,r1,570 <read_adc+0xb0>
void spi_set_div(spi_t *spi, char c){
	 spi->spi_divisor = c;
}

void spi_set_cs(spi_t *spi, char  c){
	spi->spi_cs=c;
 558:	59 60 00 08 	sw (r11+8),r0
	if(msb == 0x00 && lsb == 0x00 && lsb == 0x00){
	spi_set_cs(spi0, 0x01);
	}
	else
	spi_set_cs(spi0, 0x00);	
}
 55c:	2b 9d 00 04 	lw ra,(sp+4)
 560:	2b 8b 00 0c 	lw r11,(sp+12)
 564:	2b 8c 00 08 	lw r12,(sp+8)
 568:	37 9c 00 0c 	addi sp,sp,12
 56c:	c3 a0 00 00 	ret
void spi_set_div(spi_t *spi, char c){
	 spi->spi_divisor = c;
}

void spi_set_cs(spi_t *spi, char  c){
	spi->spi_cs=c;
 570:	34 01 00 01 	mvi r1,1
 574:	59 61 00 08 	sw (r11+8),r1
	if(msb == 0x00 && lsb == 0x00 && lsb == 0x00){
	spi_set_cs(spi0, 0x01);
	}
	else
	spi_set_cs(spi0, 0x00);	
}
 578:	2b 9d 00 04 	lw ra,(sp+4)
 57c:	2b 8b 00 0c 	lw r11,(sp+12)
 580:	2b 8c 00 08 	lw r12,(sp+8)
 584:	37 9c 00 0c 	addi sp,sp,12
 588:	c3 a0 00 00 	ret

0000058c <spi_init>:

void spi_init(spi0){
 58c:	37 9c ff f8 	addi sp,sp,-8
 590:	5b 8b 00 08 	sw (sp+8),r11
 594:	5b 9d 00 04 	sw (sp+4),ra
	read_adc(spi0, 0x01);
 598:	34 02 00 01 	mvi r2,1
	}
	else
	spi_set_cs(spi0, 0x00);	
}

void spi_init(spi0){
 59c:	b8 20 58 00 	mv r11,r1
	read_adc(spi0, 0x01);
 5a0:	fb ff ff c8 	calli 4c0 <read_adc>
	read_adc(spi0, 0x02);
 5a4:	b9 60 08 00 	mv r1,r11
 5a8:	34 02 00 02 	mvi r2,2
 5ac:	fb ff ff c5 	calli 4c0 <read_adc>
	read_adc(spi0, 0x04);
 5b0:	b9 60 08 00 	mv r1,r11
 5b4:	34 02 00 04 	mvi r2,4
 5b8:	fb ff ff c2 	calli 4c0 <read_adc>
	read_adc(spi0, 0x08);
 5bc:	b9 60 08 00 	mv r1,r11
 5c0:	34 02 00 08 	mvi r2,8
 5c4:	fb ff ff bf 	calli 4c0 <read_adc>
}
 5c8:	2b 9d 00 04 	lw ra,(sp+4)
 5cc:	2b 8b 00 08 	lw r11,(sp+8)
 5d0:	37 9c 00 08 	addi sp,sp,8
 5d4:	c3 a0 00 00 	ret

000005d8 <spi_set_div>:

void spi_set_div(spi_t *spi, char c){
 5d8:	20 42 00 ff 	andi r2,r2,0xff
	 spi->spi_divisor = c;
 5dc:	58 22 00 0c 	sw (r1+12),r2
}
 5e0:	c3 a0 00 00 	ret

000005e4 <spi_set_cs>:

void spi_set_cs(spi_t *spi, char  c){
 5e4:	20 42 00 ff 	andi r2,r2,0xff
	spi->spi_cs=c;
 5e8:	58 22 00 08 	sw (r1+8),r2
}
 5ec:	c3 a0 00 00 	ret

000005f0 <spi_set_mosi>:
void spi_set_mosi(spi_t *spi, char c){
 5f0:	20 42 00 ff 	andi r2,r2,0xff
	 while ((spi -> spi_run));
 5f4:	28 23 00 04 	lw r3,(r1+4)
 5f8:	5c 60 ff ff 	bne r3,r0,5f4 <spi_set_mosi+0x4>
	 spi->	spi_rx_tx = c;
 5fc:	58 22 00 00 	sw (r1+0),r2
}
 600:	c3 a0 00 00 	ret

00000604 <spi_set_miso>:

void spi_set_miso(spi_t *spi, char c){
 604:	20 42 00 ff 	andi r2,r2,0xff
	 while ((spi -> spi_run));
 608:	28 23 00 04 	lw r3,(r1+4)
 60c:	5c 60 ff ff 	bne r3,r0,608 <spi_set_miso+0x4>
	 spi0->spi_rx_tx = c;
 610:	78 01 00 00 	mvhi r1,0x0
 614:	38 21 06 44 	ori r1,r1,0x644
 618:	28 21 00 00 	lw r1,(r1+0)
 61c:	58 22 00 00 	sw (r1+0),r2
}
 620:	c3 a0 00 00 	ret
